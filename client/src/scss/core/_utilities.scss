/* stylelint-disable block-closing-brace-newline-after, at-rule-empty-line-before, rule-empty-line-before */

/**
 * Convert px to rem or em. Unitless values are assumed to be in px.
 *
 * @param {List}   $values Single value or list of values to convert
 * @param {Bool}   $em Use `em` units, if true
 * @param {Number} $base-value Root font size on which to base conversions
 */
@function _px-to-relative($px, $em, $base-size) {
  @if ( 'em' == unit( $px ) or 'rem' == unit( $px ) ) {
    @return $px;
  }

  @if ( 'px' == unit( $px ) ) {
    $px: $px / 1px;
  }

  @if $em == true {
    @return $px / $base-size * 1em;
  } @else {
    @return $px / $base-size * 1rem;
  }
}

/**
 * Convert a list of px values (with or without the 'px' string) to either rem or em
 *
 * @param {List}   $values Single value or list of values to convert
 * @param {Bool}   $em Use `em` units, if true
 * @param {Number} $base-value Root font size on which to base conversions
 */
@function _px-to-relative-list($values, $em, $base-value) {
  $num: length($values);
  $relative-values: ();

  @if $num == 1 {
    @return _px-to-relative(nth($values, 1), $em, $base-value);
  }

  @for $i from 1 through $num {
    $value: nth($values, $i);
    // It's 'auto'
    @if (string == type-of($value)) {
      $relative-values: append($relative-values, $value);
    } @else if (number == type-of($value)) {
      $relative-values: append($relative-values, _px-to-relative(nth($values, $i), $em, $base-value));
    }
  }

  @return $relative-values;
}

/**
 * Convert a list of px values (with or without the 'px' string) to em
 *
 * @param {List}   $values Single value or list of values to convert
 * @param {Number} $base-value Root font size on which to base conversions
 */
@function em($values, $base-value: 16) {
  @return _px-to-relative-list($values, true, $base-value);
}

/**
 * Convert a list of px values (with or without the 'px' string) to rem
 *
 * @param {List}   $values Single value or list of values to convert
 * @param {Number} $base-value Root font size on which to base conversions
 */
@function rem($values, $base-value: 16) {
  @return _px-to-relative-list($values, false, $base-value);
}

/**
 * Outputs font properties.
 *
 * @param {Number}        $size                The font-size
 * @param {Number}        $line-height: normal The line-height
 * @param {Number|String} $weight: false       The font-weight, either numerical or a map key
 */
@mixin font-props($size, $line-height: normal, $weight: false) {
  @if (type-of($size) == 'number') {
    font-size: rem($size);
  }

  @if ($weight) {
    /* stylelint-disable-next-line font-weight-notation */
    font-weight: if(
      type-of($weight) == 'number',
      $weight,
      _get-font-weight($weight)
    );
  }

  line-height: if(
    type-of($line-height) == 'number',
    ($line-height / $size),
    $line-height
  );
}

/**
 * Get a font-weight by key.
 *
 * @param  {String} $weight A map key to match
 * @return {Number}
 */
@function _get-font-weight($weight) {
  @if (not map-has-key($font-weights, $weight)) {
    @warn "$font-weights[#{$weight}] doesn't exist.";
    @return map-get($font-weights, regular);
  }

  @return map-get($font-weights, $weight);
}

/**
 * Remove browser default form element styles.
 */
@mixin form-element-reset {
  appearance: none;
  border: none;
  border-radius: 0;
  box-sizing: border-box;
  font: inherit;
  margin: 0;
}

/**
 * Remove browser default input styles.
 */
@mixin input-reset {
  @include form-element-reset;

  &::-ms-clear {
    display: none;
  }
}

/**
 * Remove browser default select styles.
 */
@mixin select-reset {
  @include form-element-reset;

  &::-ms-expand {
    display: none;
  }
}

/**
 * Remove browser default button styles.
 */
@mixin button-reset {
  @include form-element-reset;
  background-color: transparent;
  padding: 0;
}
